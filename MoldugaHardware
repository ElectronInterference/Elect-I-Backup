
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

/* This is the hardware program for our 2018-2019 Rover Ruckus robot, Molduga.
*
*This hardwaremap is the progam that declares all of our hardware, and has several
*useful functions that could be used by any opmode.
*
* --HARDWARE DEVICES--
*
*DEFINITE:
*
*leftrearDrive -- REV HD 40:1 hex motor (drive train)
*leftfrontDrive -- REV HD 40:1 hex motor (drive train)
*rightrearDrive -- REV HD 40:1 hex motor (drive train)
*rightfrontDrive -- REV HD 40:1 hex motor (drive train)
*
*Releaser -- REV servo (team marker deployment)
*
*
*SUBJECT TO CHANGE:
*
*TopLeft -- Tetrix Torquenado (lowering lift)
*TopRight -- REV HD 40:1 (raising lift)
*
*
*PLANNED:
*
*Lift -- replacing Topleft and TopRight to raise and lower the lift
*
*Gyro -- the internal gyro in the REV hub
*
*ColorSensor -- a color sensor to detect the gold minerals
*
*
*
* --FUNCTIONS--
*
*StopDrive -- stops all drive motors
*StopAll -- stops all motors and servos
*LiftUp -- raise the lift
*LiftDown -- lower the lift
*DriveForward -- drive forward
*DriveBackward -- drive backward
*DriveLeft -- strafe left
*DriveRight -- strafe right
*Wait -- wait(millis)
*ReleaseMarkder -- move Releaser servo up
*HoldMarker -- move Releaser servo down
*TurnDegrees -- turn a number of degrees(relative to the starting position)
*/




public class MoldugaHardware {
    
    
    /* Public OpMode members. */
    public DcMotor  leftrearDrive   = null;
    public DcMotor  rightrearDrive  = null;
    public DcMotor  leftfrontDrive     = null;
    public DcMotor  rightfrontDrive    = null;
    public DcMotor  TopLeft    = null;
    public DcMotor  TopRight    = null;
    public Servo    Releaser   = null;


    /* local OpMode members. */
    HardwareMap hwMap           =  null;
    private ElapsedTime period  = new ElapsedTime();

    /* Constructor */
    public MoldugaHardware(){

    }

    /* Initialize standard Hardware interfaces */
    public void init(HardwareMap ahwMap) {
        // Save reference to Hardware map
        hwMap = ahwMap;

        // Define and Initialize Motors
        leftfrontDrive  = hwMap.get(DcMotor.class, "leftfrontDrive");
        rightfrontDrive = hwMap.get(DcMotor.class, "rightfrontDrive");
        leftrearDrive   = hwMap.get(DcMotor.class, "leftrearDrive");
        rightrearDrive  = hwMap.get(DcMotor.class, "rightrearDrive");
        TopLeft         = hwMap.get(DcMotor.class, "TopLeft");
        TopRight        = hwMap.get(DcMotor.class, "TopRight");
        
        leftrearDrive.setDirection(DcMotor.Direction.FORWARD); 
        rightrearDrive.setDirection(DcMotor.Direction.REVERSE);
        leftfrontDrive.setDirection(DcMotor.Direction.FORWARD); 
        rightfrontDrive.setDirection(DcMotor.Direction.REVERSE);

        // Set all motors to zero power
        leftrearDrive.setPower(0);
        leftfrontDrive.setPower(0);
        rightrearDrive.setPower(0);
        rightfrontDrive.setPower(0);
        TopLeft.setPower(0);
        TopRight.setPower(0);
        
        // Set all motors to run with encoders.
        leftfrontDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightfrontDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftrearDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightrearDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Define and initialize ALL installed servos.
        Releaser  = hwMap.get(Servo.class, "Releaser");

    }
    
    /*Functions*/
    
    //wait for a number of seconds
    public void wait(int delay) {
        try {
            Thread.sleep(delay);
        }catch(Exception e) {
        }
    }
    
    //stop all drive motors
    public void stopDrive() {
        leftrearDrive.setPower(0);
        leftfrontDrive.setPower(0);
        rightrearDrive.setPower(0);
        rightfrontDrive.setPower(0);
    }
    
    //stop all motors
    public void stopAll() {
        leftrearDrive.setPower(0);
        leftfrontDrive.setPower(0);
        rightrearDrive.setPower(0);
        rightfrontDrive.setPower(0);
        TopLeft.setPower(0);
        TopRight.setPower(0);
    }
    
    public void driveForward(double power, double targetDistance) {
        leftrearDrive.setPower(power);
        leftfrontDrive.setPower(power);
        rightrearDrive.setPower(power);
        rightfrontDrive.setPower(power);
        wait((int)(10 * targetDistance / power));
        stopDrive();
    }
    
    public void driveBackward(double power, double targetDistance) {
        leftrearDrive.setPower(-power);
        leftfrontDrive.setPower(-power);
        rightrearDrive.setPower(-power);
        rightfrontDrive.setPower(-power);
        wait((int)(10 * targetDistance / power));
        stopDrive();
    }
    
    public void markerHold() {
        Releaser.setPosition(0.32);
    }
    
    public void markerRelease() {
        Releaser.setPosition(-0.2);
    }
 }
