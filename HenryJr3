/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import org.firstinspires.ftc.teamcode.MoldugaHardware;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;



/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */
@Autonomous(name="DepotAuto", group="Linear Opmode")

public class HenryJr3 extends LinearOpMode {

            //acces our hardware program
        MoldugaHardware robot   = new MoldugaHardware();
        int TaterTot = 1;


     
    @Override
    public void runOpMode() {
        

        
        //use our hardwaremap program
        robot.init(hardwareMap);
        telemetry.addData("Status", "Initialized");
        
        waitForStart();

        Land();
        navigateToDepot();
        //DeployMarker();
        NavigateToCrater();
    }
    
    
    public void Land(){
        //robot.liftUp();
        robot.driveRight(1,2);
        robot.turnDegrees(0);
    }
    
    
    
    
     public void FindAndKnockOffCheeseblock(){
         
        //we haven't found the cheeseblock yet
        boolean found = false;
        
        // the number of times we have tried to find the cheeseblock
        int tries = 0; 
        
        // the position the cheeseblock is in: 0 for left, 1 for center,
        // 2 for right, and a negative number for not found
        int cheesePosition = -1;
        
        telemetry.addData("Status", "Looking for Cheeseblock");
        
        //loop until we have found the cheeseblock or have tried 50 times
        while(found == false && tries < 100) { 
            
            
            //call the function to find the cheeseblock
            cheesePosition = robot.detectCheeseBlock();
            
            //if the cheeseblock is on the left...
            if(cheesePosition == 0) {
                
                //tell the loop we have found the cheeseblock
                found = true;
                telemetry.addData("status", "found left");
                telemetry.update();
                //Go to the cheeseblock
                robot.turnDegrees(-30);
                robot.driveForward(.5,26);
                
            //if the cheeseblock is in the center...
            } else if(cheesePosition == 1) {
                
                //tell the loop we have found the cheeseblock
                found = true;
                telemetry.addData("status", "found center");
                telemetry.update();
                //Go to the cheeseblock
                robot.turnDegrees(-10);
                robot.driveForward(.5,24);
                
            //if the cheeseblock is on the right...
            } else if(cheesePosition == 2) {
                
                //tell the program we have found the cheeseblock
                found = true;
                telemetry.addData("status", "found right");
                telemetry.update();
                //Go to the cheeseblock
                robot.turnDegrees(10);
                robot.driveForward(.5,24);
            }
            //tell the loop we have tried to find the cheeseblock one more time
            tries = tries + 1;
            robot.wait(100);
        }
        telemetry.update();
        robot.wait(1000);
        TaterTot=3;
    }
    
    
    
    
    
    public void navigateToDepot() {
        telemetry.addData("Status", "leaving");
        telemetry.update();
        robot.driveForward(0.6,60);
    }
    public void DeployMarker() {
       // robot.Releaser.setPosition(-0.2);
    }
    public void NavigateToCrater(){ 
        telemetry.addData("Status", "backing up");
        telemetry.update();
        robot.driveBackward(0.6,2);
        telemetry.addData("Status", "turning");
        telemetry.update();
        robot.turnDegrees(135);
        robot.driveForward(1,96);
    }
}
